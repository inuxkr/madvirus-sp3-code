<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans   
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

	<!--
		<bean id="localLogAdministrator"
		class="com.atomikos.icatch.admin.imp.LocalLogAdministrator" />
	-->

	<bean id="userTransactionService" class="com.atomikos.icatch.config.UserTransactionServiceImp"
		init-method="init" destroy-method="shutdownForce">
		<constructor-arg>
			<!-- IMPORTANT: specify all Atomikos properties here -->
			<props>
				<prop key="com.atomikos.icatch.service">
					com.atomikos.icatch.standalone.UserTransactionServiceFactory 
            </prop>
			</props>
		</constructor-arg>
		<!--		<property name="initialLogAdministrators">-->
		<!--			<list>-->
		<!--				<ref bean="localLogAdministrator" />-->
		<!--			</list>-->
		<!--		</property>-->
	</bean>

	<!--
		Construct Atomikos UserTransactionManager, needed to configure Spring
	-->
	<bean id="AtomikosTransactionManager" class="com.atomikos.icatch.jta.UserTransactionManager"
		init-method="init" destroy-method="close" depends-on="userTransactionService">
		<property name="forceShutdown" value="false" />
	</bean>

	<!--
		Also use Atomikos UserTransactionImp, needed to configure Spring
	-->
	<bean id="AtomikosUserTransaction" class="com.atomikos.icatch.jta.UserTransactionImp"
		depends-on="userTransactionService">
		<property name="transactionTimeout" value="300" />
	</bean>

	<!--
		Configure the Spring framework to use JTA transactions from Atomikos
	-->
	<bean id="transactionManager"
		class="org.springframework.transaction.jta.JtaTransactionManager"
		depends-on="userTransactionService">
		<property name="transactionManager" ref="AtomikosTransactionManager" />
		<property name="userTransaction" ref="AtomikosUserTransaction" />
	</bean>

	<bean id="billingDataSource" class="com.atomikos.jdbc.AtomikosDataSourceBean"
		init-method="init" destroy-method="close">
		<property name="uniqueResourceName" value="BILLDB" />
		<property name="xaDataSourceClassName"
			value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource" />
		<property name="xaProperties">
			<props>
				<prop key="user">root</prop>
				<prop key="password">root</prop>
				<prop key="url">jdbc:mysql://localhost/z_billing?useUnicode=true&amp;characterEncoding=euckr
				</prop>
			</props>
		</property>
		<property name="poolSize" value="1" />
	</bean>
	
	<bean id="storeDataSource" class="com.atomikos.jdbc.AtomikosDataSourceBean"
		init-method="init" destroy-method="close">
		<property name="uniqueResourceName" value="STOREDB" />
		<property name="xaDataSourceClassName"
			value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource" />
		<property name="xaProperties">
			<props>
				<prop key="user">root</prop>
				<prop key="password">root</prop>
				<prop key="url">jdbc:mysql://localhost/z_store?useUnicode=true&amp;characterEncoding=euckr
				</prop>
			</props>
		</property>
		<property name="poolSize" value="1" />
	</bean>
	
	<bean id="billingSqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean"
		p:dataSource-ref="billingDataSource" p:configLocation="WEB-INF/sqlMap/sqlMapConfig.xml" />

	<bean id="storeSqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean"
		p:dataSource-ref="storeDataSource" p:configLocation="WEB-INF/sqlMap/sqlMapConfig.xml" />

	<bean id="itemDao" class="kame.spring.store.dao.ibatis.IBatisItemDao"
		p:sqlMapClient-ref="storeSqlMapClient" />

	<bean id="paymentInfoDao" class="kame.spring.store.dao.ibatis.IBatisPaymentInfoDao"
		p:sqlMapClient-ref="billingSqlMapClient" />

	<bean id="purchaseOrderDao" class="kame.spring.store.dao.ibatis.IBatisPurchaseOrderDao"
		p:sqlMapClient-ref="storeSqlMapClient" />

	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="order" propagation="REQUIRED" />
			<tx:method name="get" read-only="true" />
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<aop:pointcut
			expression="execution(public * madvirus.spring.chap09.store.domain.*Service.*(..))"
			id="servicePublicMethod" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="servicePublicMethod" />
	</aop:config>

	<bean id="placeOrderService" class="kame.spring.store.domain.PlaceOrderServiceImpl"
		p:itemDao-ref="itemDao" p:paymentInfoDao-ref="paymentInfoDao"
		p:purchaseOrderDao-ref="purchaseOrderDao" />

</beans>